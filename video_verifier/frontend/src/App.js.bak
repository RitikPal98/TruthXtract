import React, { useState, useCallback, useEffect, useRef } from 'react';
import axios from 'axios';

// Custom styles for enhanced interactivity
const styles = {
  container: {
    transition: 'all 0.3s ease'
  },
  uploadBox: {
    base: {
      border: '2px dashed',
      transition: 'all 0.3s ease',
      cursor: 'pointer'
    },
    dragging: {
      borderColor: '#4F46E5',
      backgroundColor: 'rgba(79, 70, 229, 0.1)'
    },
    normal: {
      borderColor: '#D1D5DB',
      backgroundColor: 'rgba(249, 250, 251, 0.5)'
    },
    dark: {
      borderColor: '#4B5563',
      backgroundColor: 'rgba(31, 41, 55, 0.5)'
    }
  },
  inputHighlight: {
    focus: {
      borderColor: '#4F46E5',
      boxShadow: '0 0 0 2px rgba(79, 70, 229, 0.2)'
    },
    hover: {
      borderColor: '#818CF8'
    }
  },
  button: {
    primary: {
      base: {
        background: 'linear-gradient(135deg, #4F46E5 0%, #7C3AED 100%)',
        color: 'white',
        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'
      },
      hover: {
        transform: 'translateY(-1px)',
        boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'
      },
      active: {
        transform: 'translateY(0)'
      }
    }
  }
};

// IMPORTANT: Replace with your actual backend URL if different
const BACKEND_URL = 'http://localhost:5001'; 

const blueColor = '#2563eb';

function App() {
  const [selectedFile, setSelectedFile] = useState(null);
  const [url, setUrl] = useState('');
  const [analysisResult, setAnalysisResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null);
  const [darkMode, setDarkMode] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const fileInputRef = useRef(null);
  
  // Initialize dark mode based on user preference
  useEffect(() => {
    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
    setDarkMode(prefersDarkMode);
  }, []);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      // Clear previous media and URL
      if (previewUrl) {
        URL.revokeObjectURL(previewUrl);
      }
      setSelectedFile(file);
      setUrl(''); // Clear URL input
      setPreviewUrl(URL.createObjectURL(file));
      setAnalysisResult(null);
      setError(null);
    }
  };
  
  // Handle drag and drop functionality
  const handleDragEnter = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  };
  
  const handleDragLeave = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
  };
  
  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (!isDragging) setIsDragging(true);
  };
  
  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      const file = e.dataTransfer.files[0];
      // Check if file is image or video
      if (file.type.startsWith('image/') || file.type.startsWith('video/')) {
        // Clear previous media and URL
        if (previewUrl) {
          URL.revokeObjectURL(previewUrl);
        }
        setSelectedFile(file);
        setUrl(''); // Clear URL input
        setPreviewUrl(URL.createObjectURL(file));
        setAnalysisResult(null);
        setError(null);
      } else {
        setError('Please drop an image or video file.');
      }
    }
  };
  
  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  const handleMediaUpload = useCallback(async () => {
    if (!selectedFile && !url) {
      setError('Please select a file or enter a URL first.');
      return;
    }

    // Clear previous media if switching from file to URL or vice versa
    if (url && selectedFile) {
      setSelectedFile(null);
      if (previewUrl) {
        URL.revokeObjectURL(previewUrl);
        setPreviewUrl(null);
      }
    }

    setIsLoading(true);
    setError(null);
    setAnalysisResult(null);

    const formData = new FormData();
    if (selectedFile) {
      formData.append('media', selectedFile);
    } else if (url) {
      formData.append('url', url);
    }

    try {
      const response = await axios.post(`${BACKEND_URL}/analyze`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      setAnalysisResult(response.data);
      console.log("Analysis successful:", response.data);
    } catch (err) {
      console.error("Upload error:", err);
      const errorMessage = err.response?.data?.error || err.message || 'Failed to analyze media.';
      setError(`Analysis failed: ${errorMessage}`);
    } finally {
      setIsLoading(false);
    }
  }, [selectedFile, url, previewUrl]);

  // Function to generate reverse image search URLs
  const getReverseImageSearchUrl = (imageUrl, engine) => {
    const encodedUrl = encodeURIComponent(imageUrl);
    switch (engine) {
      case 'google':
        return `https://lens.google.com/uploadbyurl?url=${encodedUrl}`;
      case 'tineye':
        return `https://tineye.com/search?url=${encodedUrl}`;
      case 'yandex':
        return `https://yandex.com/images/search?rpt=imageview&url=${encodedUrl}`;
      default:
        return '#';
    }
  };

  // Helper function to determine progress bar color based on verification score
  const getScoreColorClass = (score) => {
    if (score >= 0.7) return 'bg-green-500'; // Likely true
    if (score >= 0.5) return 'bg-yellow-500'; // Uncertain
    return 'bg-red-500'; // Likely false
  };

  // Helper function to determine text color based on verification score
  const getScoreTextColorClass = (score) => {
    if (score >= 0.7) return 'text-green-600'; // Likely true
    if (score >= 0.5) return 'text-yellow-600'; // Uncertain
    return 'text-red-600'; // Likely false
  };

  const handlePreviewClick = () => {
    if (url) {
      // Create a preview for YouTube URLs
      if (url.includes('youtube.com') || url.includes('youtu.be')) {
        // Extract video ID from YouTube URL
        let videoId = '';
        if (url.includes('youtube.com/watch?v=')) {
          videoId = url.split('v=')[1];
          const ampersandPosition = videoId.indexOf('&');
          if (ampersandPosition !== -1) {
            videoId = videoId.substring(0, ampersandPosition);
          }
        } else if (url.includes('youtu.be/')) {
          videoId = url.split('youtu.be/')[1];
          const questionMarkPosition = videoId.indexOf('?');
          if (questionMarkPosition !== -1) {
            videoId = videoId.substring(0, questionMarkPosition);
          }
        }
        
        if (videoId) {
          // Create an embedded YouTube URL
          const embedUrl = `https://www.youtube.com/embed/${videoId}`;
          setPreviewUrl(embedUrl);
          setSelectedFile(null);
          setAnalysisResult(null);
          setError(null);
        } else {
          setError('Invalid YouTube URL format');
        }
      } else {
        // For other URLs, try to fetch as an image
        const img = new Image();
        img.onload = () => {
          setPreviewUrl(url);
          setSelectedFile(null);
          setAnalysisResult(null);
          setError(null);
        };
        img.onerror = () => {
          setError('Unable to preview this URL. Please ensure it points to a valid media file.');
        };
        img.src = url;
      }
    } else {
      setError('Please enter a URL first');
    }
  };

  return (
    <div className={`min-h-screen p-8 ${darkMode ? 'bg-gray-900' : 'bg-gray-100'}`} style={styles.container}>
      <div className="container mx-auto bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 md:p-10 max-w-6xl" style={{
        backgroundColor: darkMode ? '#1e1e1e' : 'white',
        boxShadow: darkMode ? '0 10px 25px rgba(0, 0, 0, 0.3)' : '0 10px 25px rgba(0, 0, 0, 0.1)',
        transition: 'all 0.3s ease',
        width: '90%'
      }}>
        {/* Dark mode toggle with animation */}
        <div className="flex justify-end mb-6">
          <button 
            onClick={toggleDarkMode}
            className={`p-3 rounded-full transition-all duration-300 ${darkMode ? 'bg-indigo-900 text-yellow-300 hover:bg-indigo-800' : 'bg-indigo-100 text-indigo-800 hover:bg-indigo-200'}`}
            style={{
              transform: 'scale(1)',
              transition: 'all 0.3s ease'
            }}
            onMouseEnter={(e) => e.currentTarget.style.transform = 'scale(1.1)'}
            onMouseLeave={(e) => e.currentTarget.style.transform = 'scale(1)'}
          >
            {darkMode ? (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
              </svg>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
              </svg>
            )}
          </button>
        </div>

        <div className="text-center mb-8">
          <h1 style={{ 
            fontSize: '2.8rem', 
            fontWeight: 'bold', 
            marginBottom: '0.5rem',
            background: darkMode ? 'linear-gradient(45deg, #3b82f6, #8b5cf6)' : 'linear-gradient(45deg, #2563eb, #4f46e5)',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            textAlign: 'center'
          }}>Media Verification Tool</h1>
          <p style={{ 
            fontSize: '1.3rem', 
            marginBottom: '2rem',
            color: darkMode ? '#a5b4fc' : '#4338ca',
            textAlign: 'center'
          }}>Upload images, videos or YouTube links for verification</p>
        </div>
        
        {/* Enhanced Upload Section */} 
        <div 
          className="mb-8 p-2 rounded-xl transition-all duration-300"
          style={{
            ...styles.uploadBox.base,
            ...(isDragging ? styles.uploadBox.dragging : darkMode ? styles.uploadBox.dark : styles.uploadBox.normal),
            borderWidth: isDragging ? '3px' : '2px',
            borderColor: blueColor
          }}
          onDragEnter={handleDragEnter}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
        >
          <label htmlFor="media-upload" className={`block text-xl font-semibold mb-4 ${darkMode ? 'text-gray-200' : 'text-gray-700'}`}>
            Upload Image/Video File or Enter URL
          </label>
          
          <div 
            className={`flex flex-col items-center justify-center p-8 mb-6 rounded-lg cursor-pointer transition-all duration-300 ${isDragging ? 'scale-105' : 'scale-100'}`}
            style={{
              border: `2px dashed ${isDragging ? blueColor : (darkMode ? '#4B5563' : '#D1D5DB')}`,
              background: isDragging 
                ? (darkMode ? 'rgba(76, 81, 191, 0.2)' : 'rgba(199, 210, 254, 0.5)') 
                : (darkMode ? '#1F2937' : '#F3F4F6')
            }}
            onClick={() => fileInputRef.current.click()}
          >
            <svg className={`w-16 h-16 mb-4 transition-all duration-300 ${isDragging ? 'scale-110 text-indigo-500' : (darkMode ? 'text-gray-400' : 'text-gray-500')}`} 
                 fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
            </svg>
            <p className={`mb-2 text-xl font-semibold ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
              Click to upload or drag and drop
            </p>
            <p className={`text-base ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
              Supports images and videos
            </p>
          </div>
          
          <input
            ref={fileInputRef}
            id="media-upload"
            type="file"
            accept="image/*,video/*"
            onChange={handleFileChange}
            className="hidden"
          />
          
          <div className="flex items-center my-6">
            <div className={`flex-grow border-t ${darkMode ? 'border-gray-600' : 'border-gray-300'}`}></div>
            <span className={`px-4 text-lg font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>OR</span>
            <div className={`flex-grow border-t ${darkMode ? 'border-gray-600' : 'border-gray-300'}`}></div>
          </div>
          
          <div className="flex mb-6">
            <input
              type="text"
              value={url}
              onChange={(e) => {
                setUrl(e.target.value);
                if (selectedFile) {
                  setSelectedFile(null);
                  if (previewUrl) {
                    URL.revokeObjectURL(previewUrl);
                    setPreviewUrl(null);
                  }
                }
                setAnalysisResult(null);
                setError(null);
              }}
              placeholder="Enter media URL"
              className={`flex-grow p-4 text-lg rounded-l-xl focus:outline-none transition-all duration-300 ${darkMode ? 'bg-gray-700 text-white border-gray-600 focus:border-indigo-500' : 'bg-white text-gray-700 border-gray-300 focus:border-indigo-400'}`}
              style={{
                borderWidth: '2px',
                borderColor: blueColor,
                transition: 'all 0.3s ease'
              }}
              onFocus={(e) => {
                e.target.style.borderColor = blueColor;
                e.target.style.boxShadow = '0 0 0 3px rgba(129, 140, 248, 0.3)';
              }}
              onBlur={(e) => {
                e.target.style.borderColor = darkMode ? '#4B5563' : '#D1D5DB';
                e.target.style.boxShadow = 'none';
              }}
            />
            <button
              onClick={handlePreviewClick}
              className={`font-bold py-3 px-6 rounded-r-xl transition-all duration-300 text-lg ${darkMode ? 'bg-indigo-700 hover:bg-indigo-600 text-white' : 'bg-indigo-600 hover:bg-indigo-700 text-white'}`}
              style={{
                borderWidth: '2px',
                borderColor: darkMode ? '#4B5563' : '#D1D5DB',
                minWidth: '120px'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-2px)';
                e.currentTarget.style.boxShadow = '0 4px 6px -1px rgba(79, 70, 229, 0.3), 0 2px 4px -1px rgba(79, 70, 229, 0.2)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = 'none';
              }}
            >
              Preview
            </button>
          </div>
          
          {previewUrl && (
            <div className="mt-6">
              {selectedFile && (
                <p className={`text-2xl mb-2 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                  Selected: <span className="font-medium">{selectedFile.name}</span>
                </p>
              )}
              <div className={`rounded-lg overflow-hidden border-2 ${darkMode ? 'border-gray-600' : 'border-gray-300'}`}>
                {previewUrl.match(/\.(jpeg|jpg|gif|png)$/i) ? (
                  <img src={previewUrl} alt="Preview" className="max-w-full h-auto" />
                ) : (
                  <video controls width="100%" src={previewUrl} className="max-w-full">
                    Your browser does not support the video tag.
                  </video>
                )}
              </div>
            </div>
          )}
          <button
            onClick={handleMediaUpload}
            disabled={isLoading || (!selectedFile && !url)}
            className={`mt-6 w-full py-3 px-6 rounded-lg font-bold text-2xl transition-all transform hover:scale-105 ${isLoading || (!selectedFile && !url) ? 
              (darkMode ? 'bg-gray-700 text-gray-500 cursor-not-allowed' : 'bg-gray-300 text-gray-500 cursor-not-allowed') : 
              (darkMode ? 'bg-blue-700 hover:bg-blue-600 text-white' : 'bg-blue-600 hover:bg-blue-700 text-white')}`}
            style={{
              background: isLoading || (!selectedFile && !url) ? 
                (darkMode ? '#374151' : '#D1D5DB') : 
                (darkMode ? 'linear-gradient(135deg, #3b82f6, #2563eb)' : 'linear-gradient(135deg, #2563eb, #1d4ed8)'),
              boxShadow: isLoading || (!selectedFile && !url) ? 'none' : '0 4px 6px rgba(37, 99, 235, 0.25)',
              transform: 'translateY(0)',
              transition: 'all 0.2s ease'
            }}
            onMouseDown={(e) => {
              if (!(isLoading || (!selectedFile && !url))) {
                e.currentTarget.style.transform = 'translateY(2px)';
                e.currentTarget.style.boxShadow = '0 2px 4px rgba(37, 99, 235, 0.25)';
              }
            }}
            onMouseUp={(e) => {
              if (!(isLoading || (!selectedFile && !url))) {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = '0 4px 6px rgba(37, 99, 235, 0.25)';
              }
            }}
            onMouseLeave={(e) => {
              if (!(isLoading || (!selectedFile && !url))) {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = '0 4px 6px rgba(37, 99, 235, 0.25)';
              }
            }}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
            {isLoading ? 'Analyzing...' : 'Analyze Media'}
          </button>
        </div>

        {/* Error Display */} 
        {error && (
          <div className={`mt-6 p-4 rounded-lg ${darkMode ? 'bg-red-900/30 border border-red-700' : 'bg-red-50 border border-red-200'}`}>
            <p className={`text-2xl ${darkMode ? 'text-red-300' : 'text-red-700'}`}>{error}</p>
          </div>
        )}

        {/* Analysis Results Section */} 
        {analysisResult && (
          <div className="mt-8">
            <div className="flex items-center mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-4.42-2.79-8.13-6.9-8.707l-12.78 1.79A11.934 11.934 0 001 12z" />
              </svg>
              <h3 className="text-2xl font-bold ml-2">Analysis Results</h3>
            </div>
            <h2 className="text-3xl font-semibold text-gray-700 mb-4">Media Verification Tool</h2>

            {/* Metadata Section */} 
            <div className="mb-6 bg-gray-50 p-4 rounded-lg border border-gray-200">
              <h3 className="text-2xl font-medium text-gray-800 mb-3">Media Metadata</h3>
              {analysisResult.metadata && typeof analysisResult.metadata === 'object' && Object.keys(analysisResult.metadata).length > 0 ? (
                <pre className="text-lg bg-white p-3 rounded border border-gray-300 overflow-x-auto">
                  {JSON.stringify(analysisResult.metadata, null, 2)}
                </pre>
              ) : (
                <p className="text-lg text-gray-500">No metadata extracted or metadata is empty.</p>
              )}
               {analysisResult.metadata?.Error && (
                 <p className="text-lg text-red-600 mt-2">Metadata extraction failed: {analysisResult.metadata.Error}</p>
               )}
            </div>

            {/* Keyframes Section */} 
            <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <h3 className="text-2xl font-medium text-gray-800 mb-3">Extracted Keyframes</h3>
              {analysisResult.keyframes && analysisResult.keyframes.length > 0 ? (
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                  {analysisResult.keyframes.map((keyframePath, index) => {
                    // Check if the keyframePath is a full URL (Cloudinary) or a relative path
                    const isCloudinaryUrl = keyframePath.startsWith('http');
                    const imageUrl = isCloudinaryUrl ? keyframePath : `${BACKEND_URL}/${keyframePath.replace(/\\/g, '/')}`;
                    
                    // For display name, extract filename or use frame number
                    let displayName;
                    if (isCloudinaryUrl) {
                      // Extract filename from Cloudinary URL
                      const urlParts = keyframePath.split('/');
                      displayName = urlParts[urlParts.length - 1].split('.')[0]; // Get filename without extension
                    } else {
                      displayName = keyframePath.split('/').pop().split('\\').pop();
                    }
                    
                    return (
                      <div key={index} className="border rounded-lg overflow-hidden shadow-sm bg-white p-2 text-center border-blue-500">
                        <img 
                            src={imageUrl} 
                            alt={`Keyframe ${index + 1}`} 
                            className="w-full h-auto object-cover mb-2 cursor-pointer hover:opacity-80 transition-opacity" 
                            onClick={() => window.open(imageUrl, '_blank')} // Open image in new tab
                        />
                        <p className="text-lg text-gray-600 truncate">{displayName}</p>
                         {/* Reverse Image Search Links */} 
                         <div className="mt-2 space-x-1">
                             <a href={getReverseImageSearchUrl(imageUrl, 'google')} target="_blank" rel="noopener noreferrer" className="text-lg text-blue-500 hover:underline">Google</a>
                             <a href={getReverseImageSearchUrl(imageUrl, 'tineye')} target="_blank" rel="noopener noreferrer" className="text-lg text-blue-500 hover:underline">TinEye</a>
                             <a href={getReverseImageSearchUrl(imageUrl, 'yandex')} target="_blank" rel="noopener noreferrer" className="text-lg text-blue-500 hover:underline">Yandex</a>
                         </div>
                      </div>
                    );
                })
                }
                </div>
              ) : (
                <p className="text-lg text-gray-500">No keyframes extracted or keyframe extraction failed.</p>
              )}
              {/* Display error from keyframe extraction if metadata is also missing (likely ffmpeg issue) */}
              {(!analysisResult.keyframes || analysisResult.keyframes.length === 0) && analysisResult.metadata?.Error?.includes('ffmpeg') && (
                   <p className="text-lg text-red-600 mt-2">Keyframe extraction failed: Could not run ffmpeg.</p>
              )}
            </div>

            {/* Transcription Section */}
            <div className="mb-6 bg-gray-50 p-4 rounded-lg border border-gray-200">
              <h3 className="text-2xl font-medium text-gray-800 mb-3">Transcription (Google STT)</h3>
              {analysisResult.transcription ? (
                <> 
                  {analysisResult.transcription.transcript ? (
                    <p className="text-lg text-gray-800 whitespace-pre-wrap">{analysisResult.transcription.transcript}</p>
                  ) : (
                    <p className="text-lg text-gray-500 italic">{analysisResult.transcription.error || 'No transcript generated.'}</p>
                  )}
                </>
              ) : (
                <p className="text-lg text-gray-500 italic">Transcription not available.</p>
              )}
            </div>

            {/* Fact Checking Analysis Section */}
            {analysisResult.transcript_analysis && (
              <div className="bg-gray-50 p-4 rounded-lg border border-gray-200 mb-6">
                <h3 className="text-2xl font-medium text-gray-800 mb-3">Fact-Checking Analysis</h3>
                
                {/* Verification Score */}
                <div className="mb-4">
                  <h4 className="text-lg font-medium text-gray-700">Verification Score</h4>
                  <div className="mt-2 w-full bg-gray-200 rounded-full h-4 mb-3">
                    <div 
                      className={`h-4 rounded-full ${getScoreColorClass(analysisResult.transcript_analysis.verification_score)}`}
                      style={{ width: `${analysisResult.transcript_analysis.verification_score * 100}%` }}
                    ></div>
                  </div>
                  <div className="flex justify-between mt-1 text-lg">
                    <span className="text-red-500">False</span>
                    <span className="text-yellow-500">Uncertain</span>
                    <span className="text-green-500">True</span>
                  </div>
                  <p className="text-lg mt-2">
                    <strong>Score:</strong> {(analysisResult.transcript_analysis.verification_score * 100).toFixed(1)}%
                    <span className="ml-2 text-gray-500">
                      <strong>Confidence:</strong> {(analysisResult.transcript_analysis.confidence * 100).toFixed(1)}%
                    </span>
                  </p>
                </div>

                {/* Analysis Details */}
                {analysisResult.transcript_analysis.analysis && (
                  <div className="mt-4">
                    <h4 className="text-lg font-medium text-gray-700">Analysis Details</h4>
                    
                    {analysisResult.transcript_analysis.analysis.is_basic_fact && (
                      <div className="p-3 bg-blue-50 rounded-lg mt-2">
                        <p className="text-blue-700">
                          <span className="font-bold">✓ Basic Fact Detected</span> - This statement contains a well-known fact.
                        </p>
                      </div>
                    )}

                    {analysisResult.transcript_analysis.analysis.error && (
                      <div className="p-3 bg-red-50 rounded-lg mt-2">
                        <p className="text-red-700">
                          <span className="font-bold">⚠ Analysis Error:</span> {analysisResult.transcript_analysis.analysis.error}
                        </p>
                      </div>
                    )}

                    {!analysisResult.transcript_analysis.analysis.is_basic_fact && !analysisResult.transcript_analysis.analysis.error && (
                      <div className="mt-2">
                        <div className="flex items-center mb-3">
                          <div className="flex-shrink-0 w-8 h-8 flex items-center justify-center rounded-full bg-green-100">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-600" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clipRule="evenodd" />
                            </svg>
                          </div>
                          <h4 className="ml-2 text-lg font-medium">Verification Methods Used</h4>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                          <div className="p-3 bg-green-50 border border-green-100 rounded-lg">
                            <div className="flex items-center mb-1">
                              <p className="text-lg font-semibold">Gemini AI Analysis</p>
                              <span className="ml-auto text-lg bg-green-100 text-green-800 px-2 py-0.5 rounded-full">Primary</span>
                            </div>
                            
                            {analysisResult.transcript_analysis.analysis.gemini_claims && 
                             analysisResult.transcript_analysis.analysis.gemini_claims.length > 0 && 
                             analysisResult.transcript_analysis.analysis.gemini_claims[0].verdict ? (
                              <div>
                                <p className={`text-lg font-bold ${analysisResult.transcript_analysis.analysis.gemini_claims[0].verdict === "REAL" ? "text-green-600" : "text-red-600"}`}>
                                  {analysisResult.transcript_analysis.analysis.gemini_claims[0].verdict}
                                </p>
                                <div className="flex items-center mt-1">
                                  <span className="text-lg mr-2">Truth Score:</span>
                                  <span className={`text-lg font-medium ${getScoreTextColorClass(analysisResult.transcript_analysis.analysis.gemini_score)}`}>
                                    {(analysisResult.transcript_analysis.analysis.gemini_score * 100).toFixed(0)}%
                                  </span>
                                </div>
                              </div>
                            ) : (
                              <p className={`text-lg font-bold ${getScoreTextColorClass(analysisResult.transcript_analysis.analysis.gemini_score)}`}>
                                {(analysisResult.transcript_analysis.analysis.gemini_score * 100).toFixed(0)}%
                              </p>
                            )}
                            
                            <p className="text-lg text-gray-500 mt-1">Advanced AI-based fact verification with source attribution</p>
                          </div>
                          
                          <div className="p-3 bg-blue-50 border border-blue-100 rounded-lg">
                            <div className="flex items-center mb-1">
                              <p className="text-lg font-semibold">Google Fact Check</p>
                              <span className="ml-auto text-lg bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full">Secondary</span>
                            </div>
                            <p className={`text-lg font-bold ${getScoreTextColorClass(analysisResult.transcript_analysis.analysis.google_fact_check_score)}`}>
                              {(analysisResult.transcript_analysis.analysis.google_fact_check_score * 100).toFixed(0)}%
                            </p>
                            <p className="text-lg text-gray-500 mt-1">Cross-referenced with fact-checking databases</p>
                          </div>
                          
                          <div className="p-3 bg-purple-50 border border-purple-100 rounded-lg">
                            <div className="flex items-center mb-1">
                              <p className="text-lg font-semibold">News Source Verification</p>
                              <span className="ml-auto text-lg bg-purple-100 text-purple-800 px-2 py-0.5 rounded-full">Tertiary</span>
                            </div>
                            <p className={`text-lg font-bold ${getScoreTextColorClass(analysisResult.transcript_analysis.analysis.external_verification_score)}`}>
                              {(analysisResult.transcript_analysis.analysis.external_verification_score * 100).toFixed(0)}%
                            </p>
                            <p className="text-lg text-gray-500 mt-1">Cross-checked with reliable news sources</p>
                          </div>
                        </div>
                        
                        {/* Source credibility card */}
                        {analysisResult.transcript_analysis.analysis.source_credibility !== 0.5 && (
                          <div className="p-3 bg-gray-100 rounded-lg mb-2">
                            <div className="flex items-center">
                              <p className="text-lg font-semibold">Source Credibility</p>
                              <span className="ml-auto text-lg bg-gray-200 text-gray-800 px-2 py-0.5 rounded-full">Metadata</span>
                            </div>
                            <p className={`text-lg font-bold ${getScoreTextColorClass(analysisResult.transcript_analysis.analysis.source_credibility)}`}>
                              {(analysisResult.transcript_analysis.analysis.source_credibility * 100).toFixed(0)}%
                            </p>
                            <p className="text-lg text-gray-500 mt-1">Based on media metadata source information</p>
                          </div>
                        )}
                      </div>
                    )}

                    {/* Claims Found */}
                    {analysisResult.transcript_analysis.analysis.claims && analysisResult.transcript_analysis.analysis.claims.length > 0 && (
                      <div className="mt-4">
                        <h4 className="text-lg font-medium text-gray-700 mb-2">Claims Analysis ({analysisResult.transcript_analysis.analysis.claims_found})</h4>
                        <div className="border rounded-lg bg-white">
                          {analysisResult.transcript_analysis.analysis.claims.map((claim, index) => (
                            <div key={index} className="p-4 border-b last:border-b-0">
                              {/* Google Fact Check API claim format */}
                              {claim.source_type === 'google_fact_check' && (
                                <>
                                  <div className="flex items-center justify-between mb-2">
                                    <p className="font-semibold text-lg">{claim.text}</p>
                                    <span className="text-lg bg-blue-100 text-blue-800 px-2 py-1 rounded">Google Fact Check</span>
                                  </div>
                                  <div className="flex items-center mt-1">
                                    {claim.claimReview && claim.claimReview[0] && (
                                      <>
                                        <span className="text-lg bg-gray-200 px-2 py-1 rounded mr-2">
                                          {claim.claimReview[0].publisher?.name || 'Unknown Publisher'}
                                        </span>
                                        <span className="text-lg text-blue-600">
                                          <a href={claim.claimReview[0].url} target="_blank" rel="noopener noreferrer">
                                            View Source
                                          </a>
                                        </span>
                                      </>
                                    )}
                                  </div>
                                </>
                              )}
                              
                              {/* Gemini AI claim format */}
                              {claim.source_type === 'gemini' && (
                                <>
                                  <div className="flex items-center justify-between mb-2">
                                    <p className="font-semibold text-lg">{claim.text}</p>
                                    <span className="text-lg bg-green-100 text-green-800 px-2 py-1 rounded">
                                      Gemini AI • {(claim.truthfulness * 100).toFixed(0)}% True
                                    </span>
                                  </div>
                                  
                                  {/* Truth score bar */}
                                  <div className="mt-2 w-full bg-gray-200 rounded-full h-2 mb-3">
                                    <div 
                                      className={`h-2 rounded-full ${getScoreColorClass(claim.truthfulness)}`}
                                      style={{ width: `${claim.truthfulness * 100}%` }}
                                    ></div>
                                  </div>
                                  
                                  {/* Evidence section */}
                                  {claim.evidence && (
                                    <div className="mt-2 mb-3 text-lg text-gray-700 bg-gray-50 p-2 rounded">
                                      <p><span className="font-semibold">Analysis:</span> {claim.evidence}</p>
                                    </div>
                                  )}
                                  
                                  {/* Sources section */}
                                  {claim.sources && claim.sources.length > 0 && (
                                    <div className="mt-2">
                                      <p className="text-lg font-semibold text-gray-500 mb-1">SOURCES:</p>
                                      <div className="flex flex-wrap gap-2">
                                        {claim.sources.map((source, i) => (
                                          <a 
    </div>
  );
}

export default App;
